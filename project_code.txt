# EcommerceFrontend Project Code

This file contains all the code from the EcommerceFrontend Angular project.

## Project Structure

### Configuration Files

#### package.json
```json
{
  "name": "ecommerce-frontend",
  "version": "0.0.0",
  "scripts": {
    "ng": "ng",
    "start": "ng serve",
    "build": "ng build",
    "watch": "ng build --watch --configuration development",
    "test": "ng test"
  },
  "private": true,
  "dependencies": {
    "@angular/animations": "^18.2.0",
    "@angular/common": "^18.2.0",
    "@angular/compiler": "^18.2.0",
    "@angular/core": "^18.2.0",
    "@angular/forms": "^18.2.0",
    "@angular/platform-browser": "^18.2.0",
    "@angular/platform-browser-dynamic": "^18.2.0",
    "@angular/router": "^18.2.0",
    "rxjs": "~7.8.0",
    "tslib": "^2.3.0",
    "zone.js": "~0.14.10"
  },
  "devDependencies": {
    "@angular-devkit/build-angular": "^18.2.0",
    "@angular/cli": "^18.2.0",
    "@angular/compiler-cli": "^18.2.0",
    "@types/jasmine": "~5.1.0",
    "jasmine-core": "~5.2.0",
    "karma": "~6.4.0",
    "karma-chrome-launcher": "~3.2.0",
    "karma-coverage": "~2.2.0",
    "karma-jasmine": "~5.1.0",
    "karma-jasmine-html-reporter": "~2.1.0",
    "typescript": "~5.5.2"
  }
}
```

#### angular.json
```json
{
  "$schema": "./node_modules/@angular/cli/lib/config/schema.json",
  "version": 1,
  "newProjectRoot": "projects",
  "projects": {
    "EcommerceFrontend": {
      "projectType": "application",
      "schematics": {
        "@schematics/angular:component": {
          "standalone": false
        },
        "@schematics/angular:directive": {
          "standalone": false
        },
        "@schematics/angular:pipe": {
          "standalone": false
        }
      },
      "root": "",
      "sourceRoot": "src",
      "prefix": "app",
      "architect": {
        "build": {
          "builder": "@angular-devkit/build-angular:application",
          "options": {
            "outputPath": "dist/ecommerce-frontend",
            "index": "src/index.html",
            "browser": "src/main.ts",
            "polyfills": [
              "zone.js"
            ],
            "tsConfig": "tsconfig.app.json",
            "assets": [
              {
                "glob": "**/*",
                "input": "public"
              }
            ],
            "styles": [
              "src/styles.css"
            ],
            "scripts": []
          },
          "configurations": {
            "production": {
              "budgets": [
                {
                  "type": "initial",
                  "maximumWarning": "500kB",
                  "maximumError": "1MB"
                },
                {
                  "type": "anyComponentStyle",
                  "maximumWarning": "2kB",
                  "maximumError": "4kB"
                }
              ],
              "outputHashing": "all"
            },
            "development": {
              "optimization": false,
              "extractLicenses": false,
              "sourceMap": true
            }
          },
          "defaultConfiguration": "production"
        },
        "serve": {
          "builder": "@angular-devkit/build-angular:dev-server",
          "configurations": {
            "production": {
              "buildTarget": "EcommerceFrontend:build:production"
            },
            "development": {
              "buildTarget": "EcommerceFrontend:build:development"
            }
          },
          "defaultConfiguration": "development"
        },
        "extract-i18n": {
          "builder": "@angular-devkit/build-angular:extract-i18n"
        },
        "test": {
          "builder": "@angular-devkit/build-angular:karma",
          "options": {
            "polyfills": [
              "zone.js",
              "zone.js/testing"
            ],
            "tsConfig": "tsconfig.spec.json",
            "assets": [
              {
                "glob": "**/*",
                "input": "public"
              }
            ],
            "styles": [
              "src/styles.css"
            ],
            "scripts": []
          }
        }
      }
    }
  }
}
```

#### tsconfig.json
```json
/* To learn more about Typescript configuration file: https://www.typescriptlang.org/docs/handbook/tsconfig-json.html. */
/* To learn more about Angular compiler options: https://angular.dev/reference/configs/angular-compiler-options. */
{
  "compileOnSave": false,
  "compilerOptions": {
    "outDir": "./dist/out-tsc",
    "strict": true,
    "noImplicitOverride": true,
    "noPropertyAccessFromIndexSignature": true,
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true,
    "skipLibCheck": true,
    "isolatedModules": true,
    "esModuleInterop": true,
    "sourceMap": true,
    "declaration": false,
    "experimentalDecorators": true,
    "moduleResolution": "bundler",
    "importHelpers": true,
    "target": "ES2022",
    "module": "ES2022",
    "lib": [
      "ES2022",
      "dom"
    ]
  },
  "angularCompilerOptions": {
    "enableI18nLegacyMessageIdFormat": false,
    "strictInjectionParameters": true,
    "strictInputAccessModifiers": true,
    "strictTemplates": true
  }
}
```

#### tsconfig.app.json
```json
/* To learn more about Typescript configuration file: https://www.typescriptlang.org/docs/handbook/tsconfig-json.html. */
/* To learn more about Angular compiler options: https://angular.dev/reference/configs/angular-compiler-options. */
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "outDir": "./out-tsc/app",
    "types": []
  },
  "files": [
    "src/main.ts"
  ],
  "include": [
    "src/**/*.d.ts"
  ]
}
```

### Main Application Files

#### src/main.ts
```typescript
import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';

import { AppModule } from './app/app.module';

platformBrowserDynamic().bootstrapModule(AppModule, {
  ngZoneEventCoalescing: true
})
  .catch(err => console.error(err));
```

#### src/index.html
```html
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>EcommerceFrontend</title>
  <base href="/">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" type="image/x-icon" href="favicon.ico">
</head>
<body>
  <app-root></app-root>
</body>
</html>
```

#### src/styles.css
```css
/* You can add global styles to this file, and also import other style files */
```

### App Module and Routing

#### src/app/app.module.ts
```typescript
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { HttpClientModule } from '@angular/common/http';
import { FormsModule } from '@angular/forms';

import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { ProductListComponent } from './product-list/product-list.component';
import { OrderHistoryComponent } from './order-history/order-history.component';

@NgModule({
  declarations: [
    AppComponent,
    ProductListComponent,
    OrderHistoryComponent
  ],
  imports: [
    BrowserModule,
    HttpClientModule,
    FormsModule,
    AppRoutingModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }
```

#### src/app/app-routing.module.ts
```typescript
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { ProductListComponent } from './product-list/product-list.component';
import { OrderHistoryComponent } from './order-history/order-history.component';

const routes: Routes = [
  { path: '', redirectTo: '/products', pathMatch: 'full' },
  { path: 'products', component: ProductListComponent },
  { path: 'orders', component: OrderHistoryComponent }
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }
```

### App Component

#### src/app/app.component.ts
```typescript
import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrl: './app.component.css'
})
export class AppComponent {
  title = 'EcommerceFrontend';
}
```

#### src/app/app.component.html
```html
<div class="app-container">
  <h1>E-commerce Site</h1>
  <nav>
    <ul>
      <li><a routerLink="/products" routerLinkActive="active">Products</a></li>
      <li><a routerLink="/orders" routerLinkActive="active">Order History</a></li>
    </ul>
  </nav>
  <router-outlet></router-outlet>
```

#### src/app/app.component.css
```css
.app-container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 20px;
}

nav {
  background-color: #f8f9fa;
  padding: 10px;
  border-radius: 5px;
  margin-bottom: 20px;
}

nav ul {
  list-style-type: none;
  margin: 0;
  padding: 0;
  display: flex;
  gap: 20px;
}

nav a {
  text-decoration: none;
  color: #333;
  font-weight: 500;
  padding: 8px 12px;
  border-radius: 4px;
  transition: background-color 0.3s;
}

nav a:hover {
  background-color: #e9ecef;
}

nav a.active {
  background-color: #007bff;
  color: white;
}
```

### Models

#### src/app/models/product.ts
```typescript
export interface Product {
  id: number;
  name: string;
  description: string;
  price: number;
  categoryId: number; // New field
}
```

#### src/app/models/order.ts
```typescript
import { Product } from './product';
export interface Order {
  id: number;
  productId: number;
  product: Product;
  orderDate: string;
  quantity: number;
}
```

#### src/app/models/category.ts
```typescript
export interface Category {
  id: number;
  name: string;
}
```

### Services

#### src/app/Services/product.service.ts
```typescript
import { Injectable } from '@angular/core';
import { HttpClient, HttpParams } from '@angular/common/http';
import { Observable } from 'rxjs';
import { Product } from '../../app/models/product';
import { Category } from '../../app/models/category';

@Injectable({
  providedIn: 'root'
})
export class ProductService {
  private apiUrl = 'https://localhost:7233/api';

  constructor(private http: HttpClient) { }

  getProducts(): Observable<Product[]> {
    return this.http.get<Product[]>(`${this.apiUrl}/products`);
  }

  searchProducts(searchParams: {
    query?: string;
    minPrice?: number;
    maxPrice?: number;
    categoryId?: number;
    sortBy?: string;
    page?: number;
    pageSize?: number;
  }): Observable<Product[]> {
    let params = new HttpParams();
    if (searchParams.query) params = params.set('query', searchParams.query);
    if (searchParams.minPrice) params = params.set('minPrice', searchParams.minPrice.toString());
    if (searchParams.maxPrice) params = params.set('maxPrice', searchParams.maxPrice.toString());
    if (searchParams.categoryId) params = params.set('categoryId', searchParams.categoryId.toString());
    if (searchParams.sortBy) params = params.set('sortBy', searchParams.sortBy);
    if (searchParams.page) params = params.set('page', searchParams.page.toString());
    if (searchParams.pageSize) params = params.set('pageSize', searchParams.pageSize.toString());

    return this.http.get<Product[]>(`${this.apiUrl}/products/search`, { params });
  }
  getCategories(): Observable<Category[]> {
    return this.http.get<Category[]>(`${this.apiUrl}/categories`); // New endpoint (optional)
  }
}
```

#### src/app/Services/order.service.ts
```typescript
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { Order } from '../../app/models/order';

@Injectable({
  providedIn: 'root'
})
export class OrderService {
  private apiUrl = 'https://localhost:7233/api';

  constructor(private http: HttpClient) { }
  addOrder(order: { productId: number; quantity: number }): Observable<any> {
    return this.http.post(`${this.apiUrl}/orders`, order);
  }

  getOrderHistory(): Observable<Order[]> {
    return this.http.get<Order[]>(`${this.apiUrl}/orders`);
  }
}
```

### Components

#### src/app/product-list/product-list.component.ts
```typescript
import { Component, OnInit } from '@angular/core';
import { ProductService } from '../Services/product.service';
import { OrderService } from '../Services/order.service';
import { Product } from '../models/product';
import { Category } from '../models/category';

@Component({
  selector: 'app-product-list',
  templateUrl: './product-list.component.html',
  styleUrls: ['./product-list.component.css']
})
export class ProductListComponent implements OnInit {
  products: Product[] = [];
  categories: Category[] = [];
  selectedCategoryId?: number;
  searchQuery: string = '';
  minPrice?: number;
  maxPrice?: number;
  sortBy: string = 'name';
  quantity: number = 1;

  constructor(
    private productService: ProductService,
    private orderService: OrderService
  ) { }

  ngOnInit(): void {
    this.loadProducts();
    this.loadCategories();
  }

  loadProducts(): void {
    this.productService.getProducts().subscribe(products => {
      this.products = products;
    });
  }

  loadCategories(): void {
    this.productService.getCategories().subscribe(categories => {
      this.categories = categories;
    });
  }

  searchProducts(): void {
    this.productService.searchProducts({
      query: this.searchQuery,
      minPrice: this.minPrice,
      maxPrice: this.maxPrice,
      categoryId: this.selectedCategoryId,
      sortBy: this.sortBy
    }).subscribe(products => {
      this.products = products;
    });
  }

  addToOrder(product: Product): void {
    this.orderService.addOrder({
      productId: product.id,
      quantity: this.quantity
    }).subscribe(() => {
      alert('Product added to order!');
    });
  }
}
```

#### src/app/product-list/product-list.component.html
```html
<div class="product-list-container">
  <h2>Products</h2>
  
  <div class="search-filters">
    <input type="text" [(ngModel)]="searchQuery" placeholder="Search products...">
    
    <select [(ngModel)]="selectedCategoryId">
      <option [ngValue]="undefined">All Categories</option>
      <option *ngFor="let category of categories" [value]="category.id">{{category.name}}</option>
    </select>
    
    <input type="number" [(ngModel)]="minPrice" placeholder="Min Price">
    <input type="number" [(ngModel)]="maxPrice" placeholder="Max Price">
    
    <select [(ngModel)]="sortBy">
      <option value="name">Name</option>
      <option value="price">Price</option>
    </select>
    
    <button (click)="searchProducts()">Search</button>
  </div>
  
  <div class="products-grid">
    <div *ngFor="let product of products" class="product-card">
      <h3>{{product.name}}</h3>
      <p>{{product.description}}</p>
      <p class="price">${{product.price}}</p>
      <div class="order-controls">
        <input type="number" [(ngModel)]="quantity" min="1" max="10">
        <button (click)="addToOrder(product)">Add to Order</button>
      </div>
    </div>
  </div>
</div>
```

#### src/app/product-list/product-list.component.css
```css
.product-list-container {
  padding: 20px;
}

.search-filters {
  display: flex;
  gap: 10px;
  margin-bottom: 20px;
  flex-wrap: wrap;
}

.products-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
  gap: 20px;
}

.product-card {
  border: 1px solid #ddd;
  border-radius: 8px;
  padding: 15px;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.price {
  font-weight: bold;
  color: #e63946;
}

.order-controls {
  display: flex;
  gap: 10px;
  margin-top: 10px;
}

input[type="number"] {
  width: 60px;
}
```

#### src/app/order-history/order-history.component.ts
```typescript
import { Component, OnInit } from '@angular/core';
import { OrderService } from '../Services/order.service';
import { Order } from '../models/order';

@Component({
  selector: 'app-order-history',
  templateUrl: './order-history.component.html',
  styleUrls: ['./order-history.component.css']
})
export class OrderHistoryComponent implements OnInit {
  orders: Order[] = [];

  constructor(private orderService: OrderService) { }

  ngOnInit(): void {
    this.loadOrders();
  }

  loadOrders(): void {
    this.orderService.getOrderHistory().subscribe(orders => {
      this.orders = orders;
    });
  }
}
```

#### src/app/order-history/order-history.component.html
```html
<div class="order-history-container">
  <h2>Order History</h2>
  
  <table *ngIf="orders.length > 0">
    <thead>
      <tr>
        <th>Order ID</th>
        <th>Product</th>
        <th>Quantity</th>
        <th>Price</th>
        <th>Date</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let order of orders">
        <td>{{order.id}}</td>
        <td>{{order.product.name}}</td>
        <td>{{order.quantity}}</td>
        <td>${{order.product.price * order.quantity}}</td>
        <td>{{order.orderDate | date:'medium'}}</td>
      </tr>
    </tbody>
  </table>
  
  <div *ngIf="orders.length === 0" class="no-orders">
    No orders found.
  </div>
</div>
```

#### src/app/order-history/order-history.component.css
```css
.order-history-container {
  padding: 20px;
}

table {
  width: 100%;
  border-collapse: collapse;
  margin-top: 20px;
}

th, td {
  border: 1px solid #ddd;
  padding: 12px;
  text-align: left;
}

th {
  background-color: #f2f2f2;
  font-weight: bold;
}

tr:nth-child(even) {
  background-color: #f9f9f9;
}

tr:hover {
  background-color: #f1f1f1;
}

.no-orders {
  margin-top: 20px;
  padding: 20px;
  background-color: #f8f9fa;
  border-radius: 4px;
  text-align: center;
  color: #6c757d;
}